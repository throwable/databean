Objetivos e ideas:
------------------

[x] Stepped Builders
    - Si el objeto no tiene campos obligatorios se usa simple builder:
        User.of() : User
    - Si el objeto tiene campos obligatorios se crea constructor con parametros:
        User.of("Anton", 18) : User
            o stepped builder:
        User.of()           // : UserBuilderName
            .name("Anton")  // : UserBuilderAge
            .age(18)        // : User

[x] @Nullable support: la idea es obligar por defecto manejar con valores nonnull.
    !! Usar no @Nullable sino @Nonnull dejando poner @Nullable a usuario
    - NO! propiedades @Nullable deben ser marcados escrictamente
    - si propiedad no está marcado como @Nullable puede ser uno de estos:
        - marcado como @Initial:
        - tipos primitivos
        - tipos "simples" con valor por defecto definido: boxing types, String, collections
        - valor por defecto establecido con default method()
        - tipos @DataClass con constructor por defecto
    - se inicializa con un valor por defecto
    - ? "lazy": al invocar getter o "eager": al construi
        - Enumerados a primer elementor
    - propagar @Nullable a setters & constructors
    [x] propagar @Nonnull a setters???


[x] Secondary constructors:
    - Se declaran en propia clase User:
        default User of(String name) {
            return $User.of(name, 0);
        }
    - En la clase $User se genera una copia:
        default User of(String name) {
            return User.of(name);
        }

[x] Correct generation of nested classes
    !!! Ugly things:
        - whole path required:
            Date extends MUser.MBirthInfo.MDate
        - can not generate nested classes that are started with '$'

[x] Cambiar interface User extends $User -> interface $User extends User

[ ] Inheritance
    Consolidation rules: for the properties with the same name between multiple interface inheritance
        - select resulting property with the most narrow type
        - check if all property types are compatible (one must be subinterface of another)
        - if any of the properties has @Initial annotation:
            - If resulting property or any of properties with the same type has default value
                inherit the default value to the resulting property
            - In other case set resulting property as @Initial
        - if the resulting property is readonly but any another property is mutable
            set the resulting property as mutable
    Overriding rules: for the property definitions overridden in subinterface
        - check if property type is the same or more narrow
        - if superproperty is initial check if property has @Initial or default value defined
        - if superproperty is mutable but property is marked as readonly:
            On bean generation:
            - en mutable accessor (property(value)) saltar una excepción (UnmodifiableException)
            - en setter (setProperty(value)) no hacer nada (empty)
            - generar clone-setter: ofProperty(value)

    [x] Add @Fixed annotation: fixed fields are
        - read-only
        - optionally may define default values
        -// can not be overridden by mutable properties
        - no ofXXX() methods are generated

    [x] Relax: DataClass property definition error IPet.age: error in property definition: age: read-only property must be computed, initial or with default value
        Allow undefined readOnly values with nulls or defaults

    [x] BeanGenerator.generateBean(): check on statement creation if there is used property.getterName() instead of property.name
        to access properties.

    [x] BUG: DogBean defines age field but it is readOnly

    [x] Check: all overridden properties with a default value must also provide default value

    [x] Para ofXXX() methods cambiar Bean.clone by new Bean() + setters methods porque:
        - en caso de inheritance @RW A.p -> @RO B.p no se genera B.ofP() pero existe A.ofP()
            que va a clonear el objeto B cambiando el valor de propiedad p
        - setter methods may have come restrictions (Nonnull, etc...)
            - use direct field access instead of setter()

    [x] Prohibit inheritance of @Nonnull A.p -> @Nullable B.p
        - also prohibit inheritance of @Nonnull A.p -> B.p

    [ ] Add "abstract" annotation
        - Generated bean will also be "abstract"
        - No public constructor will be generated (the same constructor with protected)
        - No public ofXXX() methods will be generated -- only protected

    [ ] Tests:
        [x] superclass: readonly property -> subclass: mutable property
        [-] default value is defined inside another interface that not superclass of current bean
            !! not allowed! prohibited multiple inheritance of abstract and default methods.
            Must be resolved explicitly.
        [ ] Model generation with @DataClass.generateBeanAccessors=false


[ ] Configuración sobre los paquetes en package-info.java que establece
    valores por defecto sobre @DataClass de los subpaquetes de forma jerarquica
    [ ] Configuración de propiedades: utilizar @Property(name="")

[ ] Equals/HashCode/ToString generation

[ ] Optional support
    - optional fields by-default are @Nonnull and with default value Optional.empty() if another default value is not specified

[ ] Default setter -- que es???

[ ] Annotation propagation:
        @JsonProperty
        int property()
    Al generar bean se propaga a:
        - field
        - getter
        - setter
        - constructor parameter
    @Annotation(@JsonProperty("name"), propagate=[field, getter, constructor])

Collections
    ? como inyectar implementaciones custom ?
    Collections:
        - generate setters
            .names(T... names)
            .names(Collection<T> names)
            .name(T name)   <- add element to collection (depluralized)
    Maps:
        - generate setters
            .entities(Pair<K,V>... entries)
            .entitites(Map<K,V> entries)    <- detectar si el mapa es mutable, hacer copia para objetos inmutables
            .entity(Pair<K,V> entry)        <- put element to collection (depluralized)
            .entity(K key, V value)         <- put element to collection (depluralized)
    - Integración con librerias (guava, vavr, etc...)
    - Hacer propia implementación inmutable de List/Set/Map
    - Siempre iniciar con Collections.emptyCollection()
    - ??? @NotEmpty (1..n) control ???

[ ] Add method MUser.cast(IUser):
    if IUser is instance of MUser
        return MUser
    else
        return immutable proxy of MUser
            - generate immutable proxy of MUser
[ ] Add method MUser.from(IUser) that creates a new instance of MUser with all fields copied from IUser
    !!! only make sence when a deep copy is made


[ ] ??? Field validators.
    - Based on JSR305???
    - Custom validation???


Metadata API
    Provide metadata api parecido a Kotlin
    - acceso estatico a propiedades
        Opcion 1 (code generation):
            UserMeta.name                   // : Property<T, V>, T = User, V = String
            UserMeta.contact                // : Property<T, V>, T = User, V = Contact
        Opcion 2 (sin generation):
            $(User::name)                   // : Property<?,V> ???
    - lista fija de propiedades
    - lista de propiedades y valores
    - Dynamic instantiator
        MetaClass.$init$                    // : (A, B, C, D) -> MetaClass


Al generar resolver tambien DataClassees compilados en otros paquetes:
    User:
        Contact contact();
    MUser:
        MContact contact();     // <-- MContact se necesita de ser resuelto
    La resolución funciona dentro del paquete, pero no con las classes de otro jar que ya estan compilados.


Data classes (immutables)

Delegates and Lazy

Nested (embedded) classes
    - poder mutar valores en embedded classes
        user.contactAddressStreet("").
    - para immutables hacer y devolver una copia de subarbol
    - idea: si contact/address no estan inicializados crearlos al acceder
        - Nunca se devuelven objetos NULL
        - Objetos Nested deben tener constructor vacío: Contact.of()
        - hashCode()/equals() deben tomar valor null del campo como objeto vacío:
            user.contact == null <=> user.contact == Contact.of()
        - no deben ser ni clase abstracta ni interface
    - se puede hacer truco devolviendo interfaz "trucada" que tracea mutaciones y establece al objeto padre

Beanpath
    - poder acceder usando beanpath: user.contact.address.street
        UserMeta.path(u -> u.contact().address().street())      // : Property<User, String>
            .set(user, "Lenina");
        user.path(u -> u.contact().address().street())          // : BoundPath<User, String>
            .set("Lenina")
        user = user.set(u -> u.name(), "Petya");
        user = user.set(User::name, "Petya");
        user.get("contact.address.street");
        $(User::contact).$(Contact::address).$(Address::street);
    - null guards: devolver nulo si alguno de

InitBlock
    - se ejecuta despues de constructor

Singletons (objects)

Custom Implementations:
    @CustomAccessor(MyAccessor.class)
    class MyAccessor implements CustomAccessor {
        Object create(Meta metaClass, Object... params) {}
        Object getValue(Object bean, Property property) {}
        Object setValue(Object bean, Property property, Object value) {}
    }
